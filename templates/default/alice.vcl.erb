backend catlady {
  .host = "<%= @node[:catlady][:ip] %>";
  .port = "<%= @node[:catlady][:port] %>";
}

backend alice {
  .host = "<%= @node[:alice][:ip] %>";
  .port = "<%= @node[:alice][:port] %>";
}

backend static {
  .host = "<%= @node[:aliceadmin][:host] %>";
  .port = "<%= @node[:aliceadmin][:port] %>";
}

sub vcl_recv {
  if (req.http.Upgrade ~ "(?i)websocket") {
         return (pipe);
     }
  if (req.restarts == 0) {
    if (req.http.x-forwarded-for) {
      set req.http.X-Forwarded-For =
      req.http.X-Forwarded-For + ", " + client.ip;
    } else {
      set req.http.X-Forwarded-For = client.ip;
    }
  }
 
  else if (req.http.host == "dev.hardchats.io" || req.http.host == "chat.hardchats.io") {
    set req.backend = catlady;

    if (req.url ~ "^/(ws)?stream") {
      return(pipe);
    }
    else if (req.url ~ "^/static") {
      set req.url = regsub(req.url, "^/static", "/alice");
      set req.backend = static;
    }
  }

  else if (req.http.host ~ "^(www\.)?hardchats\.io") {
    set req.backend = alice;
  }

  else {
    set req.backend = alice;
  }

  if (req.request != "GET" &&
      req.request != "HEAD" &&
      req.request != "PUT" &&
      req.request != "POST" &&
      req.request != "TRACE" &&
      req.request != "OPTIONS" &&
      req.request != "DELETE") {
    /* Non-RFC2616 or CONNECT which is weird. */
    return (pipe);
  }

  if (req.request != "GET" && req.request != "HEAD") {
    /* We only deal with GET and HEAD by default */
    return (pass);
  }

  if (req.http.Authorization || req.http.Cookie) {
    /* Not cacheable by default */
    return (pass);
  }

  return (lookup);
}

sub vcl_pipe {
   if (req.http.upgrade) {
     set bereq.http.upgrade = req.http.upgrade;
   }

   return (pipe);
}

sub vcl_pass {
  return (pass);
}

sub vcl_hash {
  hash_data(req.url);
  if (req.http.host) {
    hash_data(req.http.host);
  } else {
    hash_data(server.ip);
  }
  return (hash);
}

sub vcl_hit {
  return (deliver);
}
 
sub vcl_miss {
  return (fetch);
}
 
sub vcl_fetch {
  if (beresp.ttl <= 0s ||
    beresp.http.Set-Cookie ||
    beresp.http.Vary == "*") {
      /* Mark as "Hit-For-Pass" for the next 2 minutes */
      set beresp.ttl = 120 s;
      return (hit_for_pass);
    }
    return (deliver);
}
 
sub vcl_deliver {
  if (obj.hits > 0) {
    set resp.http.X-Cache = "HIT";
  } else {
    set resp.http.X-Cache = "MISS";
  }
  return (deliver);
}
 
sub vcl_error {
  set obj.http.Content-Type = "text/html; charset=utf-8";
  set obj.http.Retry-After = "5";

  synthetic {"
   <?xml version="1.0" encoding="utf-8"?>
   <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
   <html>
     <head>
       <title>aw farts</title>
       <style type="text/css"> 
         body {
           padding-top: 100px;
           background: #DDD;
           font-family: sans-serif;
           color: #4196FF;
           text-shadow: -1px -1px 1px #fafafa;
           text-align: center;
         }
         h1 {
           font-weight: normal;
         }
       </style>
     </head>
     <body>
       <h1><strong>aw</strong> farts</h1>
     </body>
   </html>
  "};

  return (deliver);
}

sub vcl_init {
  return (ok);
}

sub vcl_fini {
  return (ok);
}
